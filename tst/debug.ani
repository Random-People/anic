// debug.ani -- test file for anic debugging purposes

// basic expression testing
@std;
exp1 = [float](5);
exp2 = (-7+(-5--++-(-1))*2++-100.0e+10);
exp3 = [int\]; 1 + 2 ++ -- ->exp3;
exp4 = [float\]; 7e-1 - + ->exp4;
exp5 = [string\]; 1.0 + " concatenated to a string" ->exp5;
exp6 = [int\[1][2][3]];
exp7 = [float]{
	{{1},{2}},
	{{3.0},{4}},
	{{5},{6}}
};

// basic construct testing
{
	someInt = [int]; 10 ->someInt;
	someIntLatch = [int](-5--); \someIntLatch [int x] {x {->std.out; ->std.out;}};
	someFloat = [float](1);
	someString = [string](false);
	someChar = [char]('c');
	someChar ?? {
		'a': 1;
		'b': 2
		'c': 3;
		: 4
	} ->someIntLatch;
	someBool = [bool]();
	someFilter = [int x, string y --> bool\] {
		x + y != "Hi" ? (false) : (\boolSub) -->;
		boolSub = ((1 ^ 1) == 1);
	};
	5, (8 == 9 || (false || true)) someFilter ->std.out;
	1, 2 + , 5 * , 5 % - ++ >> 2 << 1 ->someInt;
	{ 8 [->float] [float\ f]{\f ->std.out} };
	{ 9 [->int[100]] [int\[100] intPool]{} };
	{ "hi" [int](7) ->std.out };
	{ someObj [->\] ->std.out };
	someObj = []{
		xStream = [int\\];
		\\xStream ->std.out;
		=[--> ?] {someInt == someFloat ? "someObj's string representation" : "garbage string" -->};
		=[int\ x] {\x ->xStream;}
		=[--> float] {2.0 -->};
	};
	someObj [{=[-->float]} someObjCompat --> float] {someObjCompat -->;};
	\someObj ->std.out;
	((1 < (2|1)) && (true || false)) ? (4+someInt) : (2-- * someInt++);
	true ? {"Hi" ->std.out};
	false ? {"Bye" ->std.out};
	1 [int x] {x};
	1.0e+100 [float\ f --> string] {\f; "someString" + 'c' + true + " someOtherString" + (7++ - 8--) -->};
	[float](-5.0) ([int x]{});
	someObj /* expression injection */ ([]{=;=[--> string]{"lol"-->}}) ->out;
	@std.out;
	packStream = [float\\];
	packStream2 = [float\\];
	\packStream <| |> ->packStream;
	\packStream :: \packStream2 ->packStream;
	\\packStream ->std.out;
	5 ->packStream; 6.0e-1 ->packStream; 8.1 |> ->packStream;
	5 std.gen <| [float\ f --> ?]{\f -->} ->std.out;
	8, 9.0e-5, "str", false [? intParam, ? floatParam, string\ stringParam, ? boolParam]{
		\intParam <->floatParam [->int] ->intParam;
		\boolParam <->stringParam == "str" ->boolParam;
	};
	"hello\t#1", (-8.0e-8) [? firstParam, ? secondParam --> ?] {[obj]() -->;}
};

// standard object construction testing
BinTree = []{
	x = [int\];
	leftTree = [BinTree](1); rightTree = [BinTree](2);
	=[int\ x] {\x ->BinTree.x};
	=[BinTree\ leftTree, BinTree\ rightTree] {\leftTree <->BinTree.leftTree; \rightTree <->BinTree.rightTree;}
}

// standard upcast testing
intBinOp = [int x, int y --> int\] {\std.randInt -->};
+ <->intBinOp;
stringCompOp = [string x, string y --> bool\] {false -->};
\stringCompOp;
== ->stringCompOp;

// array and pool testing
intPool = [int[256]];
7 ->intPool.[0];
10 ->intPool.[7];
intPool.[0] ->std.out;
\intPool.[intPool.[0]] ->intPool.[42];

intArray = intPool;

floatPool = [float]{1,2,3,4,5,6,7,8,9,0.0};
1.01e-8 ->floatPool.[intArray.[42 * 2 / 42]];
\floatPool.[intArray.[2]] ->std.out;

boolPool = [bool[100]]();
\boolPool.[0] ->std.out;
false ->boolPool.[0];

// object sub-identifier testing
obj = []{
	={"nothing"};
	mem = 1;
	rec = obj;
}
\obj ->obj;
constMemRef = obj.mem;
latchMemRef = [int](\obj.mem);
recObjRef = obj.rec;
recMemRef = obj.rec.mem;
objLatchRef = [obj](\obj);

// self-constructing object testing
selfConsObj = []{
	=;
	=[selfConsObj\ self] {};
}
selfConsObjIns = [selfConsObj\];

// basic import testing
impObj = []{
	=;
	mem1 = []{
		=[--> ?] { [int](10) -->; }
	};
	mem2 = "Hi";
}
useObj = []{
	=[int x] {};
	@impObj.mem1;
	mem = [int](mem1);
}

// basic inheritance testing
inhObj = []{
	=[int\ initX] {\initX;};
	inhMem = [int\];
}
subObj = []{
	=;
	@[inhObj.*];
	subMem = [float\];
}

// real-time parallel clock + calculator hybrid program
{
	@std.*;
	a=[int](0); op=[char](' '); b=[int](0); r=[int](0);
	0 [int ms] {
			("\r" + ms/1000.0 + ":" + a + op + b + "=" + r) ->out;
			1 delay (ms+1) <-
	};
	{\inInt->a \inChar->op \inInt->b <-};
	{\op ?? {'+': (\a+\b) '-': (\a-\b) '*': (\a*\b) '/': (\a/\b) : 0} ->r <-};
};

// dining philosophers problem
philosopher = []{
	id = [int\];
	chopstick = [int\];
	nextPhil = [philosopher\];
	=;
	=[int newId] { [\newId] <->id; }

	getChopsticks = [--> ?] { \chopstick, \nextPhil.chopstick --> };
	returnChopsticks = [int\ cs1, int\ cs2] { \cs1 ->chopstick; \cs2 ->nextPhil.chopstick; };
	eat = [int\ cs1, int\ cs2 --> ?] {
		"Philosopher " + id + " eating...\n" ->std.out;
		\cs1, \cs2 -->;
	};
	{ std.randInt std.delay getChopsticks eat returnChopsticks <- };
};

numPhils = 5;

philPool = [philosopher[numPhils]];
numPhils std.gen <| [int curId] {
	curId ->philPool.[curId];
	\philPool.[(curId + 1) % numPhils] ->philPool.[curId].nextPhil;
};

// program termination testing
0 -->; // terminate the program and return status 0
